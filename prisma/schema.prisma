datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  streak          Int       @default(0)
  lastCompletedAt DateTime? // Tracks the last day a task was completed for the streak system.

  // Relations to other models
  accounts        Account[]
  sessions        Session[]
  tasks           Task[]
}

model Task {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  title       String
  duration    Int
  completed   Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  propertyValues PropertyValue[]
  reminders      Reminder[]
}

model Property {
  id      String       @id @default(cuid())
  name    String       // The name the user gives the property (e.g., "Priority").
  type    PropertyType // The data type of the property (e.g., TEXT, DATE).
  userId  String       // Properties are user-specific.
  
  options Json?
  
  values  PropertyValue[]

  @@unique([userId, name]) // A user cannot have two properties with the same name.
}

model PropertyValue {
  id          String @id @default(cuid())
  value       String // The actual data stored as a string (e.g., text, a date, a selected option's ID).
  
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  
  @@unique([taskId, propertyId]) // A task can only have one value for each property.
}

model Reminder {
  id        String   @id @default(cuid())
  remindAt  DateTime // When the reminder should be sent.
  sent      Boolean  @default(false)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
}

enum PropertyType {
  TEXT
  NUMBER
  CHECKBOX
  SELECT
  MULTI_SELECT
  DATE
  URL
  EMAIL
  PHONE
}
